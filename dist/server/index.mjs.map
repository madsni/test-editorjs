{"version":3,"file":"index.mjs","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/index.ts","../../server/src/utils/plugin-id.ts","../../server/src/utils/get-service.ts","../../server/src/controllers/editorjs.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/index.ts","../../server/src/services/plugin.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  // bootstrap phase\n};\n\nexport default bootstrap;\n","import type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","import type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  // register phase\n  strapi.customFields.register({\n    name: 'PCOEditorjs',\n    plugin: 'editorjs-strapi-plugin',\n    type: 'richtext',\n    inputSize: {\n      default: 12,\n      isResizable: true,\n    },\n  });\n};\n\nexport default register;\n","export default {\n  default: {\n    header: null,\n    list: null,\n    checklist: null,\n    embed: null,\n    table: null,\n    warning: null,\n    code: null,\n    link_tool: null,\n    raw: null,\n    quote: null,\n    marker: null,\n    delimiter: null,\n    inlineCode: null,\n    image: null,\n    attaches: null,\n    component: null,\n    minHeight: null,\n  },\n};\n","export default {};\n","const pluginId = 'editorjs-strapi-plugin';\n\nexport default pluginId;\n","import pluginId from \"./plugin-id\";\n\nconst getService = (name: string): any => {\n  return strapi.plugin(pluginId).service(name);\n};\n\nexport default getService;\n","import { Context } from \"koa\";\nimport type { Core } from '@strapi/strapi';\nimport ogs from 'open-graph-scraper';\n// import { parseMultipartData } from \"@strapi/utils\";\nimport axios from \"axios\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { LocalFileData } from \"get-file-object-from-local-path\";\nimport { getService } from \"../utils\";\nimport { PassThrough } from \"stream\";\n\n// interface CustomSuccessResult extends SuccessResult {\n//   error: false;\n//   html: string;\n//   response: object;\n//   result: OgObject;\n//   ogTitle?: string;\n//   ogDescription?: string;\n//   ogImage?: {\n//     url: string;\n//   };\n// }\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n\n  config: async (ctx) => {\n    const config = await getService(\"plugin\").getConfig();\n    ctx.send(config);\n  },\n\n  link: async (ctx) => {\n    const result = await new Promise<{ success: number; meta: any }>(\n      (resolve) => {\n\n\n        // resolve({\n        //   success: 1,\n        //   meta: {\n        //     title: 'broken',\n        //     description: 'broken',\n        //     image: 'broken',\n        //   },\n        // });\n\n        // @ts-ignore\n        ogs(ctx.query, (error, results, response: PassThrough) => {\n\n          console.log('error:', error);\n          console.log('results:', results);\n          console.log('response:', response);\n\n          if (error || !(\"ogTitle\" in results)) {\n            resolve({ success: 0, meta: {} });\n            return;\n          }\n          const customResults = results;\n          const imageUrl = customResults.ogImage?.url\n            ? { url: customResults.ogImage.url }\n            : undefined;\n\n          resolve({\n            success: 1,\n            meta: {\n              title: customResults.ogTitle,\n              description: customResults.ogDescription,\n              image: imageUrl,\n            },\n          });\n        });\n\n\n      }\n    );\n\n    ctx.send(result);\n  },\n\n  byFile: async (ctx) => {\n    console.log('byFile');\n    try {\n      // const { files } = parseMultipartData(ctx);\n      const { files } = ctx\n\n      const [uploadedFile] = await strapi\n        .plugin(\"upload\")\n        .service(\"upload\")\n        .upload({\n          data: {},\n          files: Object.values(files),\n        });\n\n      ctx.send({\n        success: 1,\n        file: uploadedFile,\n      });\n    } catch (e: any) {\n      ctx.send(\n        {\n          success: 0,\n          message: e.message,\n        },\n        500\n      );\n    }\n  },\n\n  byURL: async (ctx) => {\n    console.log('byURL');\n    try {\n      const { url }: any = ctx.request.body;\n      const { name, ext } = path.parse(url);\n      const filePath = `./public/${name}${ext}`;\n\n      const response = await axios.get(url, { responseType: \"arraybuffer\" });\n      const buffer = Buffer.from(response.data, \"binary\");\n\n      await fs.promises.writeFile(filePath, buffer);\n\n      const fileData = new LocalFileData(filePath);\n\n      const file = {\n        path: filePath,\n        name: fileData.name,\n        type: fileData.type,\n        size: Buffer.byteLength(buffer),\n      };\n\n      const [uploadedFile] = await strapi\n        .plugin(\"upload\")\n        .service(\"upload\")\n        .upload({\n          data: {},\n          files: file,\n        });\n\n      await fs.promises.unlink(filePath);\n\n      ctx.send({\n        success: 1,\n        file: uploadedFile,\n      });\n    } catch (e: any) {\n      ctx.send(\n        {\n          success: 0,\n          message: e.message,\n        },\n        500\n      );\n    }\n  },\n});\n","import upload from \"./editorjs\";\n\nexport default {\n  editorjs: upload,\n};\n","export default {};\n","export default {};\n","\"use strict\";\n\nexport default {\n  editorjs: {\n    type: \"admin\",\n    routes: [\n      {\n        method: \"GET\",\n        path: \"/config\",\n        handler: \"editorjs.config\",\n        // config: {\n        //   policies: [\"admin::isAuthenticatedAdmin\"],\n        // },\n      },\n    ],\n  },\n  \"content-api\": {\n    type: \"content-api\",\n    routes: [\n      {\n        method: \"GET\",\n        path: \"/link\",\n        handler: \"editorjs.link\",\n        config: {\n          description: \"Get a URL link\",\n          auth: false,\n        },\n      },\n      {\n        method: \"POST\",\n        path: \"/image/byFile\",\n        handler: \"editorjs.byFile\",\n        config: {\n          auth: false,\n        },\n      },\n      {\n        method: \"POST\",\n        path: \"/image/byUrl\",\n        handler: \"editorjs.byURL\",\n        config: {\n          auth: false,\n        },\n      },\n    ],\n  },\n};\n\n// export default [\n//   {\n//     method: 'GET',\n//     path: '/',\n//     // name of the controller file & the method.\n//     handler: 'controller.index',\n//     config: {\n//       policies: [],\n//     },\n//   },\n// ];\n","\"use strict\";\n\nimport type { Core } from '@strapi/strapi';\n\nimport config from \"../config\";\nimport pluginId from \"../utils/plugin-id\";\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  async getConfig() {\n    const data = await strapi.config.get(`plugin.${pluginId}`, config.default);\n\n    return data;\n  },\n});\n","import plugin from './plugin';\n\nexport default {\n  plugin,\n};\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n"],"names":["strapi","config"],"mappings":"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"}